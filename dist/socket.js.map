{"version":3,"file":"socket.js","sourceRoot":"","sources":["../src/socket.ts"],"names":[],"mappings":"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","sourcesContent":["import { Server, Socket } from \"socket.io\";\r\nimport { FRONTEND_URL } from \"./config/env\";\r\nimport RoomManager from \"./managers/roomManager\";\r\nimport UserManager from \"./managers/userManager\";\r\n\r\ninterface Participant {\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\nconst frontendUrl = FRONTEND_URL;\r\nconst initializeSocket = (server: any) => {\r\n  const io = new Server(server, {\r\n    cors: { origin: frontendUrl, methods: [\"GET\", \"POST\"] },\r\n    transports: [\"websocket\"],\r\n  });\r\n\r\n  const roomManager = new RoomManager();\r\n  const userManager = new UserManager();\r\n\r\n  io.on(\"connection\", (socket: Socket) => {\r\n    console.log(\"A user connected\");\r\n    const username = socket.handshake.query.username as string;\r\n    userManager.addUser(username, socket);\r\n\r\n    // Join room (using .once to only allow a single join per connection)\r\n    socket.once(\"joinRoom\", ({ roomId, username, email, isAuthor }) => {\r\n      console.log(\r\n        `User ${username} joining room ${roomId} as ${\r\n          isAuthor ? \"author\" : \"participant\"\r\n        } with email: ${email}`\r\n      );\r\n\r\n      const participant: Participant = { username, email };\r\n\r\n      // Check if the user is blocked\r\n      if (roomManager.isUserBlocked(roomId, email)) {\r\n        console.log(\r\n          `User ${username} is blocked from room ${roomId} with email: ${email}`\r\n        );\r\n        socket.emit(\"blockedStatus\", { isBlocked: true });\r\n        return;\r\n      }\r\n\r\n      // check if the email is already being used in the room\r\n      if (roomManager.getUserByEmail(roomId, email)) {\r\n        console.log(`Email ${email} is already being used in room ${roomId}`);\r\n        socket.emit(\"emailInUse\", { isAlreadyInUse: true });\r\n        return;\r\n      }\r\n\r\n      if (!roomManager.roomExists(roomId)) {\r\n        console.log(`Room ${roomId} does not exist, creating...`);\r\n\r\n        if (isAuthor) {\r\n          roomManager.createRoom(roomId, participant);\r\n        } else {\r\n          socket.emit(\"roomJoinError\", { message: \"Room does not exist\" });\r\n          return;\r\n        }\r\n      }\r\n\r\n      const author = roomManager.getAuthor(roomId);\r\n      if (isAuthor || (author && username === author.username)) {\r\n        socket.join(roomId);\r\n        roomManager.addParticipant(roomId, participant);\r\n        socket.emit(\"currentParticipants\", roomManager.getParticipants(roomId));\r\n        socket.emit(\"joinRoomSuccess\", { roomId });\r\n      } else {\r\n        // Check for existing join requests\r\n        const existingRequests = roomManager.getJoinRequests(roomId);\r\n        const alreadyRequested = existingRequests.some(\r\n          (req) => req.username === username && req.email === email\r\n        );\r\n\r\n        if (!alreadyRequested) {\r\n          roomManager.addJoinRequest(roomId, participant);\r\n          const authorSocket = userManager.getSocket(author!.username);\r\n          authorSocket?.emit(\"joinRequest\", { username, email, roomId });\r\n          socket.emit(\"joinRequestPending\");\r\n        } else {\r\n          console.log(\r\n            `Duplicate join request from ${username} for room ${roomId}`\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n    socket.once(\"usersInRoom\", ({ roomId }: { roomId: string }) => {\r\n      if (roomManager.roomExists(roomId)) {\r\n        const numberOfUsers = roomManager.getParticipants(roomId).length;\r\n        socket.emit(\"currentUsersInRoom\", { numberOfUsers });\r\n      }\r\n    });\r\n\r\n    // For blocking a user (using .once to block user only once per connection)\r\n    socket.once(\r\n      \"blockUser\",\r\n      ({ roomId, email }: { roomId: string; email: string }) => {\r\n        console.log(\"Blocking user: \", email);\r\n        const isAlreadyBlocked = roomManager.isUserBlocked(roomId, email);\r\n\r\n        if (!isAlreadyBlocked) {\r\n          roomManager.addUserToBlockedList(roomId, email);\r\n          socket.emit(\"userBlocked\", { email });\r\n        } else {\r\n          socket.emit(\"userAlreadyBlocked\", { email });\r\n        }\r\n      }\r\n    );\r\n\r\n    // check if the email is already in use in the room\r\n    socket.on(\r\n      \"checkEmailInUse\",\r\n      ({ roomId, email }: { roomId: string; email: string }) => {\r\n        const isAlreadyInUse = roomManager.getUserByEmail(roomId, email);\r\n        if (isAlreadyInUse) {\r\n          socket.emit(\"emailInUse\", { isAlreadyInUse });\r\n        }\r\n      }\r\n    );\r\n\r\n    // Checking status of the user if he is blocked or not (once per connection)\r\n    socket.once(\r\n      \"checkBlockedStatus\",\r\n      ({ roomId, email }: { roomId: string; email: string }) => {\r\n        const isBlocked = roomManager.isUserBlocked(roomId, email);\r\n\r\n        if (isBlocked) {\r\n          console.log(\r\n            `User with email ${email} is blocked from room ${roomId}`\r\n          );\r\n          socket.emit(\"blockedStatus\", { isBlocked: true });\r\n        } else {\r\n          socket.emit(\"blockedStatus\", { isBlocked: false });\r\n        }\r\n      }\r\n    );\r\n\r\n    // For approving join request (using .once to approve only once per connection)\r\n    socket.once(\"approveJoinRequest\", ({ roomId, username, email }) => {\r\n      console.log(`Approving join request for ${username} in room ${roomId}`);\r\n      const participant: Participant = { username, email };\r\n      roomManager.addParticipant(roomId, participant);\r\n      const approvedUserSocket = userManager.getSocket(username);\r\n      if (approvedUserSocket) {\r\n        approvedUserSocket.join(roomId);\r\n        approvedUserSocket.emit(\"joinRequestApproved\", roomId);\r\n        approvedUserSocket.emit(\r\n          \"currentParticipants\",\r\n          roomManager.getParticipants(roomId)\r\n        );\r\n      }\r\n      io.to(roomId).emit(\"userJoined\", { username, email });\r\n    });\r\n\r\n    // For rejecting join request (using .once to reject only once per connection)\r\n    socket.once(\"rejectJoinRequest\", ({ roomId, username, email }) => {\r\n      console.log(`Rejecting join request for ${username} in room ${roomId}`);\r\n      const participant: Participant = { username, email };\r\n      roomManager.removeJoinRequest(roomId, participant);\r\n      const rejectedUserSocket = userManager.getSocket(username);\r\n      rejectedUserSocket?.emit(\"joinRequestRejected\", roomId);\r\n    });\r\n\r\n    // For removing participant (persistent)\r\n    socket.on(\"removeParticipant\", ({ roomId, username }) => {\r\n      console.log(`Removing ${username} from room ${roomId}`);\r\n      const roomDeleted = roomManager.removeParticipant(roomId, username);\r\n      const removedUserSocket = userManager.getSocket(username);\r\n      removedUserSocket?.leave(roomId);\r\n      removedUserSocket?.emit(\"youWereRemoved\", { roomId });\r\n\r\n      if (roomDeleted) {\r\n        io.to(roomId).emit(\"roomClosed\", false);\r\n      } else {\r\n        io.to(roomId).emit(\"userRemoved\", { username });\r\n      }\r\n    });\r\n\r\n    // For leaving room (persistent)\r\n    socket.on(\"leaveRoom\", ({ roomId, username }) => {\r\n      console.log(`${username} leaving room ${roomId}`);\r\n      console.log(\r\n        `Participants in room ${roomId}:`,\r\n        roomManager.getParticipants(roomId)\r\n      );\r\n\r\n      const author = roomManager.getAuthor(roomId);\r\n      if (author && username === author.username) {\r\n        roomManager.deleteRoom(roomId);\r\n        console.log(`Room ${roomId} deleted`);\r\n        io.to(roomId).emit(\"roomClosed\", false);\r\n      } else {\r\n        roomManager.removeParticipant(roomId, username);\r\n        io.to(roomId).emit(\"userLeft\", { username });\r\n      }\r\n    });\r\n\r\n    // For checking if room exists (persistent)\r\n    socket.on(\"RoomExists\", ({ roomId }) => {\r\n      console.log(`Checking if room ${roomId} exists`);\r\n      const status = roomManager.roomExists(roomId);\r\n      console.log(\"status of the room:\", status);\r\n      io.emit(\"roomStatus\", { roomExists: status });\r\n    });\r\n\r\n    // For changes in code editor (persistent)\r\n    socket.on(\"codeChange\", ({ content, roomId, username }) => {\r\n      console.log(`Code change in room ${roomId} by ${username} : ${content}`);\r\n      io.in(roomId).emit(\"codeUpdate\", { content, sender: username });\r\n    });\r\n\r\n    // Handle disconnect (persistent)\r\n    socket.on(\"disconnect\", () => {\r\n      console.log(`User ${username} disconnected`);\r\n\r\n      // Find all rooms where this user is the author\r\n      for (const [roomId, author] of roomManager.roomAuthors.entries()) {\r\n        if (author.username === username) {\r\n          console.log(\r\n            `Deleting room ${roomId} as author ${username} disconnected`\r\n          );\r\n          roomManager.deleteRoom(roomId);\r\n          io.to(roomId).emit(\"roomClosed\", false);\r\n        }\r\n      }\r\n\r\n      userManager.removeUser(username);\r\n      io.emit(\"userDisconnected\", { username });\r\n    });\r\n\r\n    // Implement chat feature (persistent)\r\n    socket.on(\"sendMessage\", ({ roomId, message, sender, timestamp }) => {\r\n      console.log(\r\n        `Message from ${sender} in room ${roomId}: ${message} at ${timestamp}`\r\n      );\r\n      io.to(roomId).emit(\"newMessage\", { sender, message, timestamp });\r\n    });\r\n  });\r\n\r\n  return io;\r\n};\r\n\r\nexport { initializeSocket };\r\n"]}
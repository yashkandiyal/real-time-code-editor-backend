{"version":3,"file":"roomManager.js","sourceRoot":"","sources":["../../src/managers/roomManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { error } from \"console\";\r\n\r\ninterface Participant {\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\nclass RoomManager {\r\n  private rooms: Map<string, Set<Participant>> = new Map();\r\n  private joinRequests: Map<string, Set<Participant>> = new Map();\r\n  public roomAuthors: Map<string, Participant> = new Map();\r\n  private blockedUsers: Map<string, Set<string>> = new Map();\r\n\r\n  createRoom(roomId: string, author: Participant) {\r\n    this.rooms.set(roomId, new Set([author]));\r\n    this.joinRequests.set(roomId, new Set());\r\n    this.roomAuthors.set(roomId, author);\r\n    this.blockedUsers.set(roomId, new Set()); // Initialize the blocked users list for the room\r\n  }\r\n\r\n  addParticipant(roomId: string, participant: Participant) {\r\n    const room = this.rooms.get(roomId);\r\n    if (room) {\r\n      room.add(participant);\r\n      this.removeJoinRequest(roomId, participant);\r\n    }\r\n  }\r\n\r\n  removeParticipant(roomId: string, username: string) {\r\n    const room = this.rooms.get(roomId);\r\n    if (room) {\r\n      const participantToRemove = Array.from(room).find(\r\n        (p) => p.username === username\r\n      );\r\n      if (participantToRemove) {\r\n        room.delete(participantToRemove);\r\n        if (\r\n          room.size === 0 ||\r\n          this.roomAuthors.get(roomId)?.username === username\r\n        ) {\r\n          this.deleteRoom(roomId);\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  addJoinRequest(roomId: string, participant: Participant) {\r\n    const requests = this.joinRequests.get(roomId);\r\n    if (requests) {\r\n      const alreadyRequested = Array.from(requests).some(\r\n        (req) =>\r\n          req.username === participant.username &&\r\n          req.email === participant.email\r\n      );\r\n\r\n      if (!alreadyRequested) {\r\n        requests.add(participant);\r\n      } else {\r\n        console.log(\r\n          `Duplicate join request from ${participant.username} for room ${roomId}`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  removeJoinRequest(roomId: string, participant: Participant) {\r\n    const requests = this.joinRequests.get(roomId);\r\n    if (requests) {\r\n      const participantToRemove = Array.from(requests).find(\r\n        (p) => p.username === participant.username\r\n      );\r\n      if (participantToRemove) {\r\n        requests.delete(participantToRemove);\r\n      }\r\n    }\r\n  }\r\n\r\n  deleteRoom(roomId: string) {\r\n    this.rooms.delete(roomId);\r\n    this.joinRequests.delete(roomId);\r\n    this.roomAuthors.delete(roomId);\r\n    this.blockedUsers.delete(roomId);\r\n  }\r\n\r\n  getParticipants(roomId: string): Participant[] {\r\n    return Array.from(this.rooms.get(roomId) || []);\r\n  }\r\n\r\n  getUserByEmail(roomId: string, email: string) {\r\n    if (!roomId || !email) {\r\n      return;\r\n    }\r\n    const isRoomPresent = this.rooms.has(roomId);\r\n    if (isRoomPresent) {\r\n      const participants = this.getParticipants(roomId);\r\n      const user = participants.find((p) => p.email === email);\r\n      return user;\r\n    }\r\n  }\r\n  isUserInAnyRoom(email: string): string | null {\r\n    for (const roomId of this.rooms.keys()) {\r\n      const user = this.getUserByEmail(roomId, email);\r\n      if (user) {\r\n        return roomId;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getAuthor(roomId: string): Participant | undefined {\r\n    return this.roomAuthors.get(roomId);\r\n  }\r\n\r\n  roomExists(roomId: string): boolean {\r\n    return this.rooms.has(roomId);\r\n  }\r\n\r\n  getJoinRequests(roomId: string): Participant[] {\r\n    return Array.from(this.joinRequests.get(roomId) || []);\r\n  }\r\n\r\n  addUserToBlockedList(roomId: string, email: string) {\r\n    const blockedList = this.blockedUsers.get(roomId);\r\n    if (blockedList) {\r\n      blockedList.add(email);\r\n    } else {\r\n      this.blockedUsers.set(roomId, new Set([email]));\r\n    }\r\n  }\r\n\r\n  isUserBlocked(roomId: string, email: string): boolean {\r\n    const blockedList = this.blockedUsers.get(roomId);\r\n    return blockedList ? blockedList.has(email) : false;\r\n  }\r\n\r\n  getBlockedUsers(roomId: string): string[] {\r\n    const blockedList = this.blockedUsers.get(roomId);\r\n    console.log(\"getBlockedUsers: \", blockedList);\r\n\r\n    return blockedList ? Array.from(blockedList) : [];\r\n  }\r\n}\r\n\r\nexport default RoomManager;\r\n"]}